<?php
namespace app\common\models;

use Yii;
use yii\db\ActiveRecord;
use yii\db\Expression;
use yii\web\IdentityInterface;

/**
 * Class User
 * @package app\models
 */
class User extends ActiveRecord implements IdentityInterface
{
    // Use the trait in your User model
//    use \damirka\JWT\UserTrait;

    const REQUEST_METHOD_POST = 'POST';
    const REQUEST_METHOD_PUT  = 'PUT';
    const ROLE_ADMIN = 1;
    const ROLE_SUB_ADMIN = 2;
    const ROLE_VA = 3;
    const ROLE_CLIENT = 4;

    const STATUS_ACTIVE = 1;
    const STATUS_INACTIVE = 0;

    public $subject;
    public $body;
    public $to;

    public $new_password;

    private $_user = false;

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%user}}';
    }

    /**
     * @param bool $insert
     * @return bool
     * @throws \yii\base\Exception
     */
    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $this->auth_key      = $this->generateUniqueRandomString('auth_key');
            $this->password      = app()->getSecurity()->generatePasswordHash($this->password);
            $this->created_at = new Expression('NOW()');
        }

        if (app()->request->method == self::REQUEST_METHOD_PUT) {

            if ($this->new_password) {
                $this->password = app()->getSecurity()->generatePasswordHash($this->new_password);
            }

            $this->updated_at = new Expression('NOW()');
        }

        return parent::beforeSave($insert);
    }

    /**
     * @param bool $insert
     * @param array $changedAttributes
     */
    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public function rules()
    {
        return [
            [['email', 'user_name'], 'unique'],
            [['email', 'user_name', 'password'], 'required'],
            [['auth_key', 'user_name', 'password'], 'string'],
            [['user_name', 'password', 'avatar', 'new_password'], 'safe'],
            [['first_name', 'last_name'], 'string', 'max' => 50],
            [['email'], 'unique'],
        ];
    }

    public function attributeLabels()
    {
        return [
            'id' => t('User ID'),
            'auth_key' => t('Authentication Key'),
            'email' => t('Email'),
            'user_name' => t('User Name'),
            'password' => t('Password'),
            'first_name' => t('First Name'),
            'last_name' => t('Last Name'),
            'avatar' => t('Avatar'),
            'created_at' => t('Created At'),
            'updated_at' => t('Updated At'),
        ];
    }

    /**
     * Finds an identity by the given token.
     *
     * @param string $token the token to be looked for
     * @return IdentityInterface|null the identity object that matches the given token.
     */
    public static function findIdentityByAccessToken($token, $type = null)
    {
        return static::findOne(['auth_key' => $token]);
    }

    /**
     * @return int|string current user ID
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @return string current user auth key
     */
    public function getAuthKey()
    {
        return $this->auth_key;
    }

    /**
     * @param string $authKey
     * @return boolean if auth key is valid for current user
     */
    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    /**
     * @param $username
     * @return static
     */
    public static function findByUsername($username)
    {
        return self::findOne(['user_name' => $username]);
    }

    /**
     * @param int|string $id
     * @return static
     */
    public static function findIdentity($id)
    {
        return self::findOne($id);
    }

    /**
     * @param $attribute
     * @param int $length
     * @return string
     * @throws \yii\base\Exception
     */
    public function generateUniqueRandomString($attribute, $length = 32) {

        $randomString = app()->getSecurity()->generateRandomString($length);

        if(!$this->findOne([$attribute => $randomString]))
            return $randomString;
        else
            return $this->generateUniqueRandomString($attribute, $length);
    }

    /**
     * @param $password
     * @return bool
     */
    public function validatePassword($password) {
        return app()->getSecurity()->validatePassword($password, $this->password);
    }

    /**
     * @return bool
     * Send Email
     */
    public function sendEmail()
    {
        return app()->mailer->compose()
                ->setFrom($this->to)
                ->setTo($this->email)
                ->setSubject($this->subject)
                ->setTextBody($this->body)
                ->send();
    }
}